package db;

import java.sql.*;
import java.util.ArrayList;

public class DBHandler {
	private static String driver = "oracle.jdbc.OracleDriver";
	private static String url = "jdbc:oracle:thin:@localhost:1521:xe";
	private static String dbuid = "test";
	private static String dbpwd = "1234";

	Connection conn;

	public DBHandler() {

		try {
			Class.forName(driver);
			conn = DriverManager.getConnection(url, dbuid, dbpwd);
		} catch (ClassNotFoundException e) {
			System.out.println("관리자에게 문의하세여");
		} catch (SQLException e) {
			System.out.println("관리자에게 문의하세여" + e.getMessage());
		}
	}

	public void close() {
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e) {
		}
	}

	public void insert(MemberVo vo) {
		// INSERT INTO MEMBER ( MID, NAME, PHONE )
		// VALUES ((SELECT NVL(MAX(MID),0) + 1 FROM MEMBER), '장원영', '010-1234-4567');
		String sql = "";
		sql += "INSERT INTO MEMBER (MID, NAME, PHONE) ";
		sql += " VALUES ( (SELECT NVL(MAX(MID),0) + 1 FROM MEMBER), ?, ?)";

		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, vo.getName()); // 1 : 첫번째 ?
			pstmt.setString(2, vo.getPhone()); // 2 : 두번째 ?

			pstmt.executeUpdate(); // query 를 시행해라

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (SQLException e) {
			}
		}

	}

	public ArrayList<MemberVo> selectList() {
		// 조회한 MemberVo 들의 목록(ArrayList)
		ArrayList<MemberVo> voList = new ArrayList<>();
		String sql = "";
		sql += " SELECT MID, NAME, PHONE, TO_CHAR(INDATE, 'YYYY-MM-DD') INDATE FROM MEMBER";
		// sql += " WHERE NAME LIKE ?";
		sql += " order by mid ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(sql);
			// pstmt.setString(1, "%" + "유진" + "%");
			rs = pstmt.executeQuery();

			while (rs.next()) {
				int mid = rs.getInt("MID");
				String name = rs.getString("NAME");
				String phone = rs.getString("PHONE");
				String indate = rs.getString("INDATE");
				MemberVo vo = new MemberVo();
				vo.setMid(mid);
				vo.setName(name);
				vo.setPhone(phone);
				vo.setIndate(indate);
				voList.add(vo);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
			}
		}
		return voList;
	}

	// 회원상세 정보 조회 : input : mid, output: MemberVo
	// MemberVo vo = db.getMember(Integer.parseInt(mid));
	public MemberVo getMember(int mid) {
		MemberVo vo = null;
		String sql = "";
		sql += "SELECT MID, NAME, PHONE, TO_CHAR(INDATE, 'YYYY-MM-DD') INDATE ";
		sql += " FROM MEMBER WHERE MID = ?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, mid);
			rs = pstmt.executeQuery(); // 조회결과가 1개 이거나 0개 임
			// 결과 0개 이면 rs.next() 가 false
			// 결과 1개 이면 rs.next() 가 true
			if (rs.next()) {
				int mid1 = rs.getInt("mid");
				String name = rs.getString("NAME");
				String phone = rs.getString("PHONE");
				String indate = rs.getString("INDATE");
				vo = new MemberVo();
				vo.setMid(mid1);
				vo.setName(name);
				vo.setPhone(phone);
				vo.setIndate(indate);
			} else {
				// 조회한 자료가 없다.
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
					rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return vo;
	} // getmember 끝

	public void delete(int mid) {
		String sql = "";
		sql += "delete from member where MID = ?";
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/*
	 * public void update(MemberVo vo) { String sql = ""; sql +=
	 * "UPDATE MEMBER SET NAME = ?, PHONE = ? "; sql += " WHERE MID = ? ";
	 * 
	 * PreparedStatement pstmt = null; try { pstmt = conn.prepareStatement(sql);
	 * pstmt.setString(1, vo.getName()); // 1 : 첫번째 ? pstmt.setString(2,
	 * vo.getPhone()); // 2 : 두번째 ? pstmt.setInt(3, vo.getMid()); // 2 : 두번째 ?
	 * 
	 * pstmt.executeUpdate(); // query 를 시행해라
	 * 
	 * } catch (SQLException e) { e.printStackTrace(); } finally { try { if (pstmt
	 * != null) pstmt.close(); } catch (SQLException e) { } } }
	 */
}
